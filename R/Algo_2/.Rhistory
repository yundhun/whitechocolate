x<-cbind(x,rev(mv),stringsAsFactors=FALSE)
names(x)[ncol(x)] <- paste0("mv_",n[i])
}
x
}
ll<-lapply(smallhistlist,yoosma,n=c(20,60))
##
compare_mv <- function(x,price=...,alpha=...){
v <- x[1,2]
cv <- c()
price_length<- length(price)
check <- rep(FALSE,price_length)
for (i in 1:length(price)){
k <- x[1,which(colnames(x) == price[i])]
judge <- abs(v-k)/k
if(judge<=alpha[i]) {
check[i]<-TRUE
}
}
if(all(check)){
return(TRUE)
}else{
}
}
compare_mv_new <- function(x,price=...,alpha=...,test="abs"){
v <- x[1,2]
cv <- c()
price_length<- length(price)
check <- rep(FALSE,price_length)
for (i in 1:length(price)){
k <- x[1,which(colnames(x) == price[i])]
judge <- (v-k)/k
switch(test,
abs = {
judge <- abs(judge)
if(judge<=alpha[i]) {
check[i]<-TRUE
}
},
low ={
if( 0>judge & judge >= (-alpha[i])){
check[i]<-TRUE
}
},
upper = {
if( (0<= judge & judge <= alpha[i])){
check[i]<-TRUE
}
}
)
}
if(all(check)){
return(TRUE)
}else{
}
}
###거래량 터진시점 가격과 현재시가 비교 5%
kosdaq[which(kosdaq$code %in% candidate2),2]
print("거래량 터진시점 가격과 현재시가 비교 5% 에서 필터링")
##20일선의 5%
t <- sapply(ll,compare_mv,price=c("mv_20"),alpha=0.05)
t20<-remove_null_list(t)
t20list<-kosdaq[which(kosdaq$code %in% names(t20)),2]
print("##20일선의 5%")
t20list
##60일선의 3%
t <- sapply(ll,compare_mv,price=c("mv_60"),alpha=0.03)
t60<-remove_null_list(t)
t60list<-kosdaq[which(kosdaq$code %in% names(t60)),2]
print("##60일선의 3%")
t60list
##20일선의 5% 60일선의 1%
t <- sapply(ll,compare_mv,price=c("mv_20","mv_60"),alpha=c(0.05,0.01))
t2060<-remove_null_list(t)
t2060list<-kosdaq[which(kosdaq$code %in% names(t2060)),2]
print("##20일선의 5% 60일선의 1%")
t2060list
library(TTR)
library(qcc)
histlist[which('039240' == names(histlist))]
remove_null_list <- function(x){
x[sapply(x, is.null)] <- NULL
x
}
meanfactor=5
alpha=0.05
candidate2 <- c()
###거래량 터진시점 가격과 현재시가 비교
for (i in 1:length(histlist)){
hist <- histlist[[i]][1:40,]
code <- names(histlist)[i]
basevolume <- mean(hist$volume)*meanfactor
isthere<-which(hist$volume>=basevolume)
if (length(isthere)>0){
basep<-NULL
maxp<-hist[which.max(hist$volume),]
islarge <- ((maxp$start_price+maxp$high_price)/2*maxp$volume>5000000000)
isup <- (maxp$last_price-maxp$start_price>0)
if(islarge&isup){
testp = maxp
while(testp$volume>basevolume){
rowname <- as.numeric(row.names(testp))
if((rowname+1)<=nrow(hist)) {
testp <- hist[(rowname+1),]
}
else {
break
}
}
rowname <- as.numeric(row.names(testp))
if ((rowname-1)>0){
basep <- hist[(rowname-1),]
}else
{basep <- testp}
judgea<-abs((basep$start_price-hist[1,]$last_price))/basep$start_price
if(judgea<=alpha){
candidate2 <<-c(candidate2,code)
}
}
}
}
l2<-kosdaq[which(kosdaq$code %in% candidate2),2]
smallhistlist <- histlist[which(names(histlist) %in% candidate2)]
##sma
yoosma<-function(x,n=...){
price <- rev(x[,2])
for(i in 1:length(n)){
mv<-SMA(price,n[i])
x<-cbind(x,rev(mv),stringsAsFactors=FALSE)
names(x)[ncol(x)] <- paste0("mv_",n[i])
}
x
}
ll<-lapply(smallhistlist,yoosma,n=c(20,60))
##
compare_mv <- function(x,price=...,alpha=...){
v <- x[1,2]
cv <- c()
price_length<- length(price)
check <- rep(FALSE,price_length)
for (i in 1:length(price)){
k <- x[1,which(colnames(x) == price[i])]
judge <- abs(v-k)/k
if(judge<=alpha[i]) {
check[i]<-TRUE
}
}
if(all(check)){
return(TRUE)
}else{
}
}
compare_mv_new <- function(x,price=...,alpha=...,test="abs"){
v <- x[1,2]
cv <- c()
price_length<- length(price)
check <- rep(FALSE,price_length)
for (i in 1:length(price)){
k <- x[1,which(colnames(x) == price[i])]
judge <- (v-k)/k
switch(test,
abs = {
judge <- abs(judge)
if(judge<=alpha[i]) {
check[i]<-TRUE
}
},
low ={
if( 0>judge & judge >= (-alpha[i])){
check[i]<-TRUE
}
},
upper = {
if( (0<= judge & judge <= alpha[i])){
check[i]<-TRUE
}
}
)
}
if(all(check)){
return(TRUE)
}else{
}
}
###거래량 터진시점 가격과 현재시가 비교 5%
kosdaq[which(kosdaq$code %in% candidate2),2]
print("거래량 터진시점 가격과 현재시가 비교 5% 에서 필터링")
##20일선의 5%
t <- sapply(ll,compare_mv,price=c("mv_20"),alpha=0.05)
t20<-remove_null_list(t)
t20list<-kosdaq[which(kosdaq$code %in% names(t20)),2]
print("##20일선의 5%")
t20list
##60일선의 3%
t <- sapply(ll,compare_mv,price=c("mv_60"),alpha=0.03)
t60<-remove_null_list(t)
t60list<-kosdaq[which(kosdaq$code %in% names(t60)),2]
print("##60일선의 3%")
t60list
##20일선의 5% 60일선의 1%
t <- sapply(ll,compare_mv,price=c("mv_20","mv_60"),alpha=c(0.05,0.01))
t2060<-remove_null_list(t)
t2060list<-kosdaq[which(kosdaq$code %in% names(t2060)),2]
print("##20일선의 5% 60일선의 1%")
t2060list
##기준으로 쌍바닥
counts <- 2
base <- 0.01
maxbase <- 0.05
minbase <- 0.01
candidate2<-sapply(histlist,function(a){
count <- 0
baseprice <- a[1,]$last_price
upper <- baseprice*(1+base)
low <- baseprice*(1-base)
k<-which(upper >= a$last_price & low <= a$last_price)
if(length(k)>1){
for (i in 1:(length(k)-1)){
idx <- k[i]:k[i+1]
max_price <- max(a[idx,]$last_price)
max_last <- max(baseprice,a[k[i],]$last_price)
max_price_base <- max_last*(1+maxbase)
if(max_price_base<=max_price){
if(minbase!=0){
count <- count+1
}else{
min_price <- min(a[idx,]$last_price)
judge<- abs(baseprice-min_price)/min_price
if(judge<=minbase){
count <- count+1
}
}
}
}
}
count
})
candidate2<-names(candidate2[which(candidate2 != 0)])
smallhistlist <- histlist[which(names(histlist) %in% candidate2)]
ll<-lapply(smallhistlist,yoosma,n=c(20,60))
print("가격과 현재시가 비교 5% 에서 필터링")
##20일선의 5%
t <- sapply(ll,compare_mv,price=c("mv_20"),alpha=0.05)
t20<-remove_null_list(t)
t20list<-kosdaq[which(kosdaq$code %in% names(t20)),2]
print("##20일선의 5%")
t20list
##60일선의 3%
t <- sapply(ll,compare_mv,price=c("mv_60"),alpha=0.03)
t60<-remove_null_list(t)
t60list<-kosdaq[which(kosdaq$code %in% names(t60)),2]
print("##60일선의 3%")
t60list
##20일선의 5% 60일선의 1%
t <- sapply(ll,compare_mv,price=c("mv_20","mv_60"),alpha=c(0.05,0.01))
t2060<-remove_null_list(t)
t2060list<-kosdaq[which(kosdaq$code %in% names(t2060)),2]
print("##20일선의 5% 60일선의 1%")
t2060list
t <- sapply(ll,compare_mv_new,price=c("mv_20","mv_60"),alpha=c(0.05,0.01),"upper")
t2060<-remove_null_list(t)
t2060list<-kosdaq[which(kosdaq$code %in% names(t2060)),2]
print("##20일선의 5% 60일선의 1%")
t2060list
dat <- readRDS('dat/dat_price.rds')
dat <- readRDS('dat/dat3.rds')
colnms <- colnames(dat)
colnms <- gsub(" ", "", colnms, fixed = TRUE)
colnms <- gsub("&", "", colnms, fixed = TRUE)
colnms <- gsub("-", "", colnms, fixed = TRUE)
colnames(dat) <- colnms
start_date <- 90
test_period <- 60
#Training 범위
training_period <- 90
#예측 기간
predict_period <- 3
#RSI 기준
rsiLimit <- 70
#MSET 추천 갯수
recommendItem <- 50
#Clustering
clust2 <- ClustOfVar::kmeansvar(X.quanti = dat, init=5)
clust2 <- clust2$var
nor <- function(x){ (x-min(x))/(max(x)-min(x)) }
clust <- list()
for( i in 1:length(clust2)){
cts <- clust2[[i]]
if(length(cts) == 2) next()
cts <- as.data.frame(cts)
tmp <- rep(0,nrow(dat))
for(ct in rownames(cts)){
tmp <- tmp + nor(dat[,ct])
}
ts <- 1
selectedStock <- NULL
for(ct in rownames(cts)){
if(cor(dat[,ct], tmp) < 0.9) next()
if(ts==1){
plot(nor(dat[,ct]),type='l',col='gray', main=i)
points(nor(tmp), type='l')
}else{
points(nor(dat[,ct]),type='l',col='gray')
}
ts <- ts+1
selectedStock <- c(selectedStock,ct)
}
clust[[i]] <- selectedStock
}
library(parallel)
library(MASS)
library(TTR)
library(ClustOfVar)
source("lib/mset_Regress.r")
install.packages('ClustOfVar')
clust2 <- ClustOfVar::kmeansvar(X.quanti = dat, init=5)
clust2 <- clust2$var
nor <- function(x){ (x-min(x))/(max(x)-min(x)) }
clust <- list()
for( i in 1:length(clust2)){
cts <- clust2[[i]]
if(length(cts) == 2) next()
cts <- as.data.frame(cts)
tmp <- rep(0,nrow(dat))
for(ct in rownames(cts)){
tmp <- tmp + nor(dat[,ct])
}
ts <- 1
selectedStock <- NULL
for(ct in rownames(cts)){
if(cor(dat[,ct], tmp) < 0.9) next()
if(ts==1){
plot(nor(dat[,ct]),type='l',col='gray', main=i)
points(nor(tmp), type='l')
}else{
points(nor(dat[,ct]),type='l',col='gray')
}
ts <- ts+1
selectedStock <- c(selectedStock,ct)
}
clust[[i]] <- selectedStock
}
result <- matrix(0, nrow = 1, ncol = 6)
#for(predict_period in 1:10){
predict_period <- 3
clust[[1]]
View(dat)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
parallel::clusterExport(myCluster, c("dat","mset_Regress","ginv","EMA","RSI","training_period","clust","start_date",
"predict_period","test_period"))
m <- parSapply(myCluster, as.character(1:length(clust)),
function(x){
x <- as.numeric(x)
if(length(clust[[x]]) < 2) return(NULL)
stockNms <- clust[[x]]
tdat <- dat[,stockNms]
model <- list()
for(i in start_date:(start_date+test_period-predict_period)){
tdat2 <- tdat[(i-training_period):(i-1), ]
md = mset_Regress(tdat2,predict_period)
temp <- as.data.frame(md$predict)
model[[i]] <- temp
}
ret <- list(num = model)
})
parallel::stopCluster(myCluster)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
parallel::clusterExport(myCluster, c("dat","mset_Regress","ginv","EMA","RSI","training_period","clust","start_date",
"predict_period","test_period"))
m <- parSapply(myCluster, as.character(1:length(clust)),
function(x){
x <- as.numeric(x)
if(length(clust[[x]]) < 2) return(NULL)
stockNms <- clust[[x]]
tdat <- dat[,stockNms]
model <- list()
for(i in start_date:(start_date+test_period-predict_period)){
tdat2 <- tdat[(i-training_period):(i-1), ]
md = mset_Regress(tdat2,predict_period)
temp <- as.data.frame(md$predict)
model[[i]] <- temp
}
ret <- list(num = model)
})
parallel::stopCluster(myCluster)
#Modeling - End
clust
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
parallel::clusterExport(myCluster, c("dat","mset_Regress","ginv","EMA","RSI","training_period","clust","start_date",
"predict_period","test_period"))
m <- parSapply(myCluster, as.character(1:length(clust)),
function(x){
x <- as.numeric(x)
if(length(clust[[x]]) < 2) return(NULL)
stockNms <- clust[[x]]
tdat <- dat[,stockNms]
model <- list()
for(i in start_date:(start_date+test_period-predict_period)){
tdat2 <- tdat[(i-training_period):(i-1), ]
md = mset_Regress(tdat2,predict_period)
temp <- as.data.frame(md$predict)
model[[i]] <- temp
}
ret <- list(num = model)
})
parallel::stopCluster(myCluster)
numCores <- parallel::detectCores() - 1
myCluster <- parallel::makeCluster(numCores)
parallel::clusterExport(myCluster, c("dat","mset_Regress","ginv","EMA","RSI","training_period","clust","start_date",
"predict_period","test_period"))
m <- parSapply(myCluster, as.character(1:length(clust)),
function(x){
x <- as.numeric(x)
if(length(clust[[x]]) < 2) return(NULL)
stockNms <- clust[[x]]
tdat <- dat[,stockNms]
model <- list()
for(i in start_date:(start_date+test_period-predict_period)){
tdat2 <- tdat[(i-training_period):(i-1), ]
md = mset_Regress(tdat2,predict_period)
temp <- as.data.frame(md$predict)
model[[i]] <- temp
}
ret <- list(num = model)
})
parallel::stopCluster(myCluster)
if(!require(parallel)) {
install.packages("parallel")
}
library(parallel)
library(MASS)
library(TTR)
library(ClustOfVar)
library(caret)
source("lib/mset_Regress.r")
nearZeroVar
source('./lib/wc_libs.R')
source("lib/mset_Regress.r")
library(parallel)
library(MASS)
library(TTR)
library(ClustOfVar)
library(caret)
dat <- readRDS('./dat/dat4.rds')
dat <- dat_prep_1(dat)
head(dat)
class(dat)
dat[,'X205470']
clust = clust_stocks(dat,5)
clust[[1]]
clust[[2]]
clust[[3]]
clust[[4]]
clust[[5]]
full_dat <- readRDS('./dat/dat4.rds')
full_dat <- dat_prep_1(full_dat)
start_date <- 30
#분석 기간
test_period <- 60
#Training 범위
training_period <- 30
#예측 기간
predict_period <- 3
#RSI 기준
rsiLimit <- 70
#MSET 추천 갯수
recommendItem <- 50
start_date-predict_period
start_date-training_period
start_date
start_date-training_period+1
start_date
clutNum <- 1
stockNms <- clust[[clustNum]]
clust
clustNum <- 2
stockNms <- clust[[clustNum]]
stockNms
dat <- full_dat[(today_date-training_period+1):today_date,]
today_date <- 30
dat <- full_dat[(today_date-training_period+1):today_date,]
dat
clust = clust_stocks(dat,5)
dat <- dat_prep_1(dat)
source('./lib/wc_libs.R')
dat <- dat_prep_1(dat)
dat
clust = clust_stocks(dat,5)
stockNms <- clust[[clustNum]]
tdat <- dat[,stockNms]
stockNms
tdat
source('./lib/wc_libs.R')
stockNm <- sotkckNms[1]
stockNm <- stockNms[1]
stockNm
m <- mset_stock(dat,stockNm,predict_period)
m
dat
rownames(dat)
m <- mset_stock(tdat,stockNm,predict_period)
m
tdat[-predict_period:]
tdat[(nrow(tdat)-predict_period):nrow(tdat),]
tdat[(nrow(tdat)-predict_period-1):nrow(tdat),]
tdat[(nrow(tdat)-predict_period+1):nrow(tdat),]
te_dat <- tdat[(nrow(tdat)-predict_period+1):nrow(tdat),]
pred_dat <- predict(m, newdata = te_dat)
pred_dat
